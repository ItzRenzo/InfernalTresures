plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"    
}

group = 'me.itzrenzo'
version = '1.0'
description = 'InfernalTreasures'

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'phoenix'
        url = 'https://nexus.phoenixdevt.fr/repository/maven-public/'
    }
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }
}

dependencies {
    // Paper API
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    
    // Database dependencies - minimal versions
    implementation 'org.xerial:sqlite-jdbc:3.42.0.0'
    implementation 'com.mysql:mysql-connector-j:8.0.33'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    
    // Optional integrations
    compileOnly 'io.lumine:MythicLib-dist:1.6.2-SNAPSHOT'
    compileOnly 'net.Indyuce:MMOItems-API:6.10-SNAPSHOT'
    
    // SCore - use local JAR file since it's not in public repositories
    compileOnly files('src/main/resources/SCore-5.25.6.14.jar')
    compileOnly files('src/main/resources/ExecutableBlocks_5.25.6.24.jar')
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
    
    // Exclude JAR files from being copied to resources to prevent them from being included in final JAR
    exclude '**/*.jar'
    exclude '**/SCore-*.jar'
}

jar {
    from {
        configurations.runtimeClasspath.collect { file ->
            file.isDirectory() ? file : zipTree(file).matching {
                // Include only class files
                include '**/*.class'
                
                // Exclude unnecessary files to reduce size
                exclude 'META-INF/MANIFEST.MF'
                exclude 'META-INF/*.SF'
                exclude 'META-INF/*.DSA'
                exclude 'META-INF/*.RSA'
                exclude 'META-INF/maven/**'
                exclude 'META-INF/LICENSE*'
                exclude 'META-INF/NOTICE*'
                exclude 'META-INF/DEPENDENCIES*'
                exclude 'META-INF/*.txt'
                exclude 'META-INF/*.xml'
                exclude 'META-INF/versions/**'
                exclude 'module-info.class'
                exclude '**/*.html'
                exclude '**/*.md'
                exclude '**/*.txt'
                exclude '**/*.xml'
                exclude '**/*.properties'
                
                // Exclude unused MySQL X DevAPI
                exclude 'com/mysql/cj/xdevapi/**'
                
                // Keep essential services
                include 'META-INF/services/**'
            }
        }
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier = ''
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
}

compileJava.options.release = 21